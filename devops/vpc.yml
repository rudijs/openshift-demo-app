---
AWSTemplateFormatVersion: "2010-09-09"

Description: "Creates a VPC"

Parameters:
  VPCName:
    Description: The name of the VPC being created.
    Type: String
    Default: "go-poc-vpc"

  Environment:
    Description: The VPC Environment to use
    Type: String
    Default: dev
    AllowedValues: ["dev", "staging", "production"]
    ConstraintDescription: must be dev, staging or production.

  SSHLocation:
    Description: Lockdown SSH access to the bastion host (default can be accessed
      from anywhere)
    Type: String
    MinLength: "9"
    MaxLength: "18"
    Default: 0.0.0.0/0
    AllowedPattern: (\d{1,3})\.(\d{1,3})\.(\d{1,3})\.(\d{1,3})/(\d{1,2})
    ConstraintDescription: must be a valid CIDR range of the form x.x.x.x/x.

  KeyName:
    Description: Name of an existing EC2 KeyPair to enable SSH access to the web server
    Type: AWS::EC2::KeyPair::KeyName
    ConstraintDescription: must be the name of an existing EC2 KeyPair.
    # Default: xxxxxxx

  DBName:
    Default: poc-demo
    Description: The database name
    Type: String
    MinLength: "1"
    MaxLength: "64"
    AllowedPattern: "[a-zA-Z][a-zA-Z0-9]*"
    ConstraintDescription: must begin with a letter and contain only alphanumeric
      characters.

  DBUser:
    Default: "root"
    NoEcho: "true"
    Description: The database admin account username
    Type: String
    MinLength: "1"
    MaxLength: "16"
    AllowedPattern: "[a-zA-Z][a-zA-Z0-9]*"
    ConstraintDescription: must begin with a letter and contain only alphanumeric
      characters.

  DBPassword:
    NoEcho: "true"
    Description: The database admin account password
    Type: String
    MinLength: "1"
    MaxLength: "41"
    AllowedPattern: "[a-zA-Z0-9]+"
    ConstraintDescription: must contain only alphanumeric characters.

  DBAllocatedStorage:
    Default: "100"
    Description: The size of the database (Gb)
    Type: Number
    MinValue: "5"
    MaxValue: "1024"
    ConstraintDescription: must be between 5 and 1024Gb.

  DBInstanceClass:
    Description: The database instance type
    Type: String
    Default: db.t2.medium
    AllowedValues:
      [
        db.t1.micro,
        db.m1.small,
        db.m1.medium,
        db.m1.large,
        db.m1.xlarge,
        db.m2.xlarge,
        db.m2.2xlarge,
        db.m2.4xlarge,
        db.m3.medium,
        db.m3.large,
        db.m3.xlarge,
        db.m3.2xlarge,
        db.m4.large,
        db.m4.xlarge,
        db.m4.2xlarge,
        db.m4.4xlarge,
        db.m4.10xlarge,
        db.r3.large,
        db.r3.xlarge,
        db.r3.2xlarge,
        db.r3.4xlarge,
        db.r3.8xlarge,
        db.m2.xlarge,
        db.m2.2xlarge,
        db.m2.4xlarge,
        db.cr1.8xlarge,
        db.t2.micro,
        db.t2.small,
        db.t2.medium,
        db.t2.large,
      ]
    ConstraintDescription: must select a valid database instance type.

  MultiAZ:
    Description: Multi-AZ master database
    Type: String
    Default: "true"
    AllowedValues: ["true", "false"]
    ConstraintDescription: must be true or false.

Conditions:
  IsProduction: !Equals [!Ref Environment, "production"]

Mappings:
  SubnetConfig:
    VPC:
      CIDR: "10.0.0.0/16"
    Public0:
      CIDR: "10.0.0.0/24"
    Public1:
      CIDR: "10.0.1.0/24"
    Private0:
      CIDR: "10.0.2.0/24"
    Private1:
      CIDR: "10.0.3.0/24"

  # This mapping accounts for the scenario when certain AZs
  # are not available to use (this differs on a per account
  # per customer basis). E.g., if the 'b' AZ is not available
  # in a specific region in one's account then updating the
  # list contained in the mapping below here will allow a
  # different AZ to be chosen.
  AZRegions:
    ap-northeast-1:
      AZs: ["a", "b"]
    ap-northeast-2:
      AZs: ["a", "b"]
    ap-south-1:
      AZs: ["a", "b"]
    ap-southeast-1:
      AZs: ["a", "b"]
    ap-southeast-2:
      AZs: ["a", "b"]
    ca-central-1:
      AZs: ["a", "b"]
    eu-central-1:
      AZs: ["a", "b"]
    eu-west-1:
      AZs: ["a", "b"]
    eu-west-2:
      AZs: ["a", "b"]
    sa-east-1:
      AZs: ["a", "b"]
    us-east-1:
      AZs: ["a", "b"]
    us-east-2:
      AZs: ["a", "b"]
    us-west-1:
      AZs: ["a", "b"]
    us-west-2:
      AZs: ["a", "b"]

Resources:
  VPC:
    Type: "AWS::EC2::VPC"
    Properties:
      EnableDnsSupport: "true"
      EnableDnsHostnames: "true"
      CidrBlock:
        Fn::FindInMap:
          - "SubnetConfig"
          - "VPC"
          - "CIDR"
      Tags:
        - Key: "Application"
          Value:
            Ref: "AWS::StackName"
        - Key: "Network"
          Value: "Public"
        - Key: "Name"
          Value: !Join
            - ""
            - - !Ref "VPCName"
              - "-"
              - !Ref "AWS::Region"
              - "-"
              - !Ref "Environment"

  PublicSubnet0:
    Type: "AWS::EC2::Subnet"
    Properties:
      VpcId:
        Ref: "VPC"
      AvailabilityZone:
        Fn::Sub:
          - "${AWS::Region}${AZ}"
          - AZ: !Select [0, !FindInMap ["AZRegions", !Ref "AWS::Region", "AZs"]]
      CidrBlock:
        Fn::FindInMap:
          - "SubnetConfig"
          - "Public0"
          - "CIDR"
      MapPublicIpOnLaunch: "true"
      Tags:
        - Key: "Application"
          Value:
            Ref: "AWS::StackName"
        - Key: "Network"
          Value: "Public"
        - Key: "Name"
          Value: !Join
            - ""
            - - !Ref "VPCName"
              - "-public-"
              - !Select [0, !FindInMap ["AZRegions", !Ref "AWS::Region", "AZs"]]
              - "-"
              - !Ref "Environment"

  PrivateSubnet0:
    Type: "AWS::EC2::Subnet"
    Properties:
      VpcId:
        Ref: "VPC"
      AvailabilityZone:
        Fn::Sub:
          - "${AWS::Region}${AZ}"
          - AZ: !Select [0, !FindInMap ["AZRegions", !Ref "AWS::Region", "AZs"]]
      CidrBlock:
        Fn::FindInMap:
          - "SubnetConfig"
          - "Private0"
          - "CIDR"
      Tags:
        - Key: "Application"
          Value:
            Ref: "AWS::StackName"
        - Key: "Network"
          Value: "Private"
        - Key: "Name"
          Value: !Join
            - ""
            - - !Ref "VPCName"
              - "-private-"
              - !Select [0, !FindInMap ["AZRegions", !Ref "AWS::Region", "AZs"]]
              - "-"
              - !Ref "Environment"

  PrivateSubnet1:
    Type: "AWS::EC2::Subnet"
    Properties:
      VpcId:
        Ref: "VPC"
      AvailabilityZone:
        Fn::Sub:
          - "${AWS::Region}${AZ}"
          - AZ: !Select [1, !FindInMap ["AZRegions", !Ref "AWS::Region", "AZs"]]
      CidrBlock:
        Fn::FindInMap:
          - "SubnetConfig"
          - "Private1"
          - "CIDR"
      Tags:
        - Key: "Application"
          Value:
            Ref: "AWS::StackName"
        - Key: "Network"
          Value: "Private"
        - Key: "Name"
          Value: !Join
            - ""
            - - !Ref "VPCName"
              - "-private-"
              - !Select [1, !FindInMap ["AZRegions", !Ref "AWS::Region", "AZs"]]
              - "-"
              - !Ref "Environment"

  InternetGateway:
    Type: "AWS::EC2::InternetGateway"
    Properties:
      Tags:
        - Key: "Application"
          Value:
            Ref: "AWS::StackName"
        - Key: "Network"
          Value: "Public"
        - Key: "Name"
          Value: !Join
            - ""
            - - !Ref "VPCName"
              - "-IGW"
              - "-"
              - !Ref "Environment"

  GatewayToInternet:
    Type: "AWS::EC2::VPCGatewayAttachment"
    Properties:
      VpcId:
        Ref: "VPC"
      InternetGatewayId:
        Ref: "InternetGateway"

  PublicRouteTable:
    Type: "AWS::EC2::RouteTable"
    Properties:
      VpcId:
        Ref: "VPC"
      Tags:
        - Key: "Application"
          Value:
            Ref: "AWS::StackName"
        - Key: "Network"
          Value: "Public"
        - Key: "Name"
          Value: !Join
            - ""
            - - !Ref "VPCName"
              - "-public-route-table"
              - "-"
              - !Ref "Environment"

  PublicRoute:
    Type: "AWS::EC2::Route"
    DependsOn: "GatewayToInternet"
    Properties:
      RouteTableId:
        Ref: "PublicRouteTable"
      DestinationCidrBlock: "0.0.0.0/0"
      GatewayId:
        Ref: "InternetGateway"

  PublicSubnetRouteTableAssociation0:
    Type: "AWS::EC2::SubnetRouteTableAssociation"
    Properties:
      SubnetId:
        Ref: "PublicSubnet0"
      RouteTableId:
        Ref: "PublicRouteTable"

  PublicNetworkAcl:
    Type: "AWS::EC2::NetworkAcl"
    Properties:
      VpcId:
        Ref: "VPC"
      Tags:
        - Key: "Application"
          Value:
            Ref: "AWS::StackName"
        - Key: "Network"
          Value: "Public"
        - Key: "Name"
          Value: !Join
            - ""
            - - !Ref "VPCName"
              - "-public-nacl"
              - "-"
              - !Ref "Environment"

  InboundHTTPPublicNetworkAclEntry:
    Type: "AWS::EC2::NetworkAclEntry"
    Properties:
      NetworkAclId:
        Ref: "PublicNetworkAcl"
      RuleNumber: "100"
      Protocol: "-1"
      RuleAction: "allow"
      Egress: "false"
      CidrBlock: "0.0.0.0/0"
      PortRange:
        From: "0"
        To: "65535"

  OutboundPublicNetworkAclEntry:
    Type: "AWS::EC2::NetworkAclEntry"
    Properties:
      NetworkAclId:
        Ref: "PublicNetworkAcl"
      RuleNumber: "100"
      Protocol: "-1"
      RuleAction: "allow"
      Egress: "true"
      CidrBlock: "0.0.0.0/0"
      PortRange:
        From: "0"
        To: "65535"

  PublicSubnetNetworkAclAssociation0:
    Type: "AWS::EC2::SubnetNetworkAclAssociation"
    Properties:
      SubnetId:
        Ref: "PublicSubnet0"
      NetworkAclId:
        Ref: "PublicNetworkAcl"

  ElasticIP0:
    Type: "AWS::EC2::EIP"
    Properties:
      Domain: "vpc"

  NATGateway0:
    Type: "AWS::EC2::NatGateway"
    Properties:
      AllocationId:
        Fn::GetAtt:
          - "ElasticIP0"
          - "AllocationId"
      SubnetId:
        Ref: "PublicSubnet0"
      Tags:
        - Key: "Name"
          Value: !Join
            - ""
            - - !Ref "VPCName"
              - "-nat-gateway-0"
              - "-"
              - !Ref "Environment"

  PrivateRouteTable0:
    Type: "AWS::EC2::RouteTable"
    Properties:
      VpcId:
        Ref: "VPC"
      Tags:
        - Key: "Name"
          Value: !Join
            - ""
            - - !Ref "VPCName"
              - "-private-route-table-0"
              - "-"
              - !Ref "Environment"

  PrivateRouteTable1:
    Type: "AWS::EC2::RouteTable"
    Properties:
      VpcId:
        Ref: "VPC"
      Tags:
        - Key: "Name"
          Value: !Join
            - ""
            - - !Ref "VPCName"
              - "-private-route-table-1"
              - "-"
              - !Ref "Environment"

  PrivateRouteToInternet0:
    Type: "AWS::EC2::Route"
    Properties:
      RouteTableId:
        Ref: "PrivateRouteTable0"
      DestinationCidrBlock: "0.0.0.0/0"
      NatGatewayId:
        Ref: "NATGateway0"

  PrivateRouteToInternet1:
    Type: "AWS::EC2::Route"
    Properties:
      RouteTableId:
        Ref: "PrivateRouteTable1"
      DestinationCidrBlock: "0.0.0.0/0"
      NatGatewayId:
        Ref: "NATGateway0"

  PrivateSubnetRouteTableAssociation0:
    Type: "AWS::EC2::SubnetRouteTableAssociation"
    Properties:
      SubnetId:
        Ref: "PrivateSubnet0"
      RouteTableId:
        Ref: "PrivateRouteTable0"

  PrivateSubnetRouteTableAssociation1:
    Type: "AWS::EC2::SubnetRouteTableAssociation"
    Properties:
      SubnetId:
        Ref: "PrivateSubnet1"
      RouteTableId:
        Ref: "PrivateRouteTable1"

  DBSubnetGroup:
    Type: AWS::RDS::DBSubnetGroup
    Properties:
      DBSubnetGroupDescription: Mysql Subnet Group
      DBSubnetGroupName: !Join ["-", [!Ref "VPCName", "mysql-subnetgroup", !Ref "Environment"]]
      SubnetIds:
        - !Ref PrivateSubnet0
        - !Ref PrivateSubnet1
      Tags:
        - Key: "Name"
          Value: !Join
            - ""
            - - !Ref "VPCName"
              - "-"
              - "dbsubnetgroup"
              - "-"
              - !Ref "Environment"

  DBEC2SecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      VpcId: !Ref "VPC"
      GroupDescription: Open database for private subnet access
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: "3306"
          ToPort: "3306"
          CidrIp: "0.0.0.0/0"
          # CidrIp:
          #   Fn::FindInMap:
          #     - "SubnetConfig"
          #     - "Public0"
          #     - "CIDR"
      Tags:
        - Key: "Name"
          Value: !Join
            - ""
            - - !Ref "VPCName"
              - "-"
              - "mysql-private"
              - "-"
              - !Ref "Environment"

Outputs:
  VPCId:
    Description: "VPCId of VPC"
    Value:
      Ref: "VPC"
    Export:
      Name: !Sub "${AWS::Region}-${AWS::StackName}-VPC"

  PublicSubnet0:
    Description: "SubnetId of public subnet 0"
    Value:
      Ref: "PublicSubnet0"
    Export:
      Name: !Sub "${AWS::Region}-${AWS::StackName}-PublicSubnet0"

  PrivateSubnet0:
    Description: "SubnetId of private subnet 0"
    Value:
      Ref: "PrivateSubnet0"
    Export:
      Name: !Sub "${AWS::Region}-${AWS::StackName}-PrivateSubnet0"

  DefaultSecurityGroup:
    Description: "DefaultSecurityGroup Id"
    Value: !GetAtt VPC.DefaultSecurityGroup
    Export:
      Name: !Sub "${AWS::Region}-${AWS::StackName}-DefaultSecurityGroup"

  EC2SecurityGroupSSH:
    Description: "EC2SecurityGroupSSH Id"
    Value:
      Ref: "EC2SecurityGroupSSH"
    Export:
      Name: !Sub "${AWS::Region}-${AWS::StackName}-EC2SecurityGroupSSH"

  EC2SecurityGroupMYSQL:
    Description: "EC2SecurityGroupMYSQL Id"
    Value:
      Ref: "EC2SecurityGroupMYSQL"
    Export:
      Name: !Sub "${AWS::Region}-${AWS::StackName}-EC2SecurityGroupMYSQL"

  EC2SecurityGroupHTTP:
    Description: "EC2SecurityGroupHTTP Id"
    Value:
      Ref: "EC2SecurityGroupHTTP"
    Export:
      Name: !Sub "${AWS::Region}-${AWS::StackName}-EC2SecurityGroupHTTP"
  # Instance:
  #   Description: DNS Name of the newly created EC2 instance
  #   Value: !GetAtt [EC2Instance, PublicDnsName]
  #   Export:
  #     Name: !Sub "${AWS::Region}-${AWS::StackName}-Instance"
